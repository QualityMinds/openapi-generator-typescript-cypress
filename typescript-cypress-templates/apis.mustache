/* tslint:disable */
/* eslint-disable */
{{>licenseInfo}}

import * as runtime from '../runtime{{importFileExtension}}';
{{#imports.0}}
import type {
  {{#imports}}
  {{className}},
  {{/imports}}
} from '../models/index{{importFileExtension}}';
{{^withoutRuntimeChecks}}
import {
    {{#imports}}
    {{className}}FromJSON,
    {{className}}ToJSON,
    {{/imports}}
} from '../models/index{{importFileExtension}}';
{{/withoutRuntimeChecks}}
{{/imports.0}}

{{#operations}}
{{#operation}}
{{#allParams.0}}
export interface {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request {
{{#allParams}}
    {{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{#hasReadOnly}}Omit<{{{dataType}}}, {{#readOnlyVars}}'{{baseName}}'{{^-last}}|{{/-last}}{{/readOnlyVars}}>{{/hasReadOnly}}{{^hasReadOnly}}{{{dataType}}}{{/hasReadOnly}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}};
{{/allParams}}
}

{{/allParams.0}}
{{/operation}}
{{/operations}}
{{#withInterfaces}}
{{#operations}}
/**
 * {{classname}} - interface
 * {{#lambda.indented_1}}{{{unescapedDescription}}}{{/lambda.indented_1}}
 * @export
 * @interface {{classname}}Interface
 */
export interface {{classname}}Interface {
{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{=<% %>=}}{<%&dataType%>}<%={{ }}=%> {{^required}}[{{/required}}{{paramName}}{{^required}}]{{/required}} {{description}}
     {{/allParams}}
     * @param {*} [options] Override http request option.
    {{#isDeprecated}}
     * @deprecated
    {{/isDeprecated}}
     * @throws {RequiredError}
     * @memberof {{classname}}Interface
     */
    {{nickname}}Raw({{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request, {{/allParams.0}}initOverrides?: RequestInit | runtime.InitOverrideFunction): Cypress.Chainable<runtime.ApiResponse<{{{returnType}}}{{^returnType}}void{{/returnType}}>>;

    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    {{^useSingleRequestParameter}}
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}, {{/allParams}}initOverrides?: RequestInit | runtime.InitOverrideFunction): Cypress.Chainable<{{{returnType}}}{{#returnType}}{{#isResponseOptional}} | null | undefined {{/isResponseOptional}}{{/returnType}}{{^returnType}}void{{/returnType}}>;
    {{/useSingleRequestParameter}}
    {{#useSingleRequestParameter}}
    {{nickname}}({{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request, {{/allParams.0}}initOverrides?: RequestInit | runtime.InitOverrideFunction): Cypress.Chainable<{{{returnType}}}{{#returnType}}{{#isResponseOptional}} | null | undefined {{/isResponseOptional}}{{/returnType}}{{^returnType}}void{{/returnType}}>;
    {{/useSingleRequestParameter}}

{{/operation}}
}

{{/operations}}
{{/withInterfaces}}
{{#operations}}
/**
 * {{#lambda.indented_star_1}}{{{unescapedDescription}}}{{/lambda.indented_star_1}}
 */
{{#withInterfaces}}
export class {{classname}} extends runtime.BaseAPI implements {{classname}}Interface {
{{/withInterfaces}}
{{^withInterfaces}}
export class {{classname}} extends runtime.BaseAPI {
{{/withInterfaces}}

    {{#operation}}
    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    {{nickname}}Raw({{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request, {{/allParams.0}}initOverrides?: RequestInit | runtime.InitOverrideFunction): Cypress.Chainable<runtime.ApiResponse<{{{returnType}}}{{^returnType}}void{{/returnType}}>> {
        {{#allParams}}
        {{#required}}
        if (requestParameters['{{paramName}}'] == null) {
            throw new runtime.RequiredError(
                '{{paramName}}',
                'Required parameter "{{paramName}}" was null or undefined when calling {{nickname}}().'
            );
        }

        {{/required}}
        {{/allParams}}
        const queryParameters: any = {};

        {{#queryParams}}
        {{#isArray}}
        if (requestParameters['{{paramName}}'] != null) {
            {{#isCollectionFormatMulti}}
            queryParameters['{{baseName}}'] = requestParameters['{{paramName}}'];
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
            queryParameters['{{baseName}}'] = {{#uniqueItems}}Array.from({{/uniqueItems}}requestParameters['{{paramName}}']{{#uniqueItems}}){{/uniqueItems}}!.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
            {{/isCollectionFormatMulti}}
        }

        {{/isArray}}
        {{^isArray}}
        if (requestParameters['{{paramName}}'] != null) {
            {{#isDateTimeType}}
            queryParameters['{{baseName}}'] = (requestParameters['{{paramName}}'] as any).toISOString();
            {{/isDateTimeType}}
            {{^isDateTimeType}}
            {{#isDateType}}
            queryParameters['{{baseName}}'] = (requestParameters['{{paramName}}'] as any).toISOString().substring(0,10);
            {{/isDateType}}
            {{^isDateType}}
            queryParameters['{{baseName}}'] = requestParameters['{{paramName}}'];
            {{/isDateType}}
            {{/isDateTimeType}}
        }

        {{/isArray}}
        {{/queryParams}}
        const headerParameters: runtime.HTTPHeaders = {};

        {{#bodyParam}}
        {{^consumes}}
        headerParameters['Content-Type'] = 'application/json';

        {{/consumes}}
        {{#consumes.0}}
        headerParameters['Content-Type'] = '{{{mediaType}}}';

        {{/consumes.0}}
        {{/bodyParam}}
        {{#headerParams}}
        {{#isArray}}
        if (requestParameters['{{paramName}}'] != null) {
            headerParameters['{{baseName}}'] = {{#uniqueItems}}Array.from({{/uniqueItems}}requestParameters['{{paramName}}']{{#uniqueItems}}){{/uniqueItems}}!.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]);
        }

        {{/isArray}}
        {{^isArray}}
        if (requestParameters['{{paramName}}'] != null) {
            headerParameters['{{baseName}}'] = String(requestParameters['{{paramName}}']);
        }

        {{/isArray}}
        {{/headerParams}}
        {{#authMethods}}
        {{#isBasic}}
        {{#isBasicBasic}}
        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        {{/isBasicBasic}}
        {{#isBasicBearer}}
        if (this.configuration && this.configuration.accessToken) {
            headerParameters["Authorization"] = `Bearer ${this.configuration.accessToken}`;
        }
        {{/isBasicBearer}}
        {{/isBasic}}
        {{#isApiKey}}
        {{#isKeyInHeader}}
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["{{keyParamName}}"] = this.configuration.apiKey;
        }

        {{/isKeyInHeader}}
        {{#isKeyInQuery}}
        if (this.configuration && this.configuration.apiKey) {
            queryParameters["{{keyParamName}}"] = await this.configuration.apiKey("{{keyParamName}}"); // {{name}} authentication
        }

        {{/isKeyInQuery}}
        {{/isApiKey}}
        {{#isOAuth}}
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("{{name}}", [{{#scopes}}"{{{scope}}}"{{^-last}}, {{/-last}}{{/scopes}}]);
        }

        {{/isOAuth}}
        {{/authMethods}}
        {{#hasFormParams}}
        const consumes: runtime.Consume[] = [
            {{#consumes}}
            { contentType: '{{{mediaType}}}' },
            {{/consumes}}
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        {{#formParams}}
        {{#isFile}}
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        {{/isFile}}
        {{/formParams}}
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        {{#formParams}}
        {{#isArray}}
        if (requestParameters['{{paramName}}'] != null) {
            {{#isCollectionFormatMulti}}
            requestParameters['{{paramName}}'].forEach((element) => {
                formParams.append('{{baseName}}{{#useSquareBracketsInArrayNames}}[]{{/useSquareBracketsInArrayNames}}', element as any);
            })
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
            formParams.append('{{baseName}}{{#useSquareBracketsInArrayNames}}[]{{/useSquareBracketsInArrayNames}}', {{#uniqueItems}}Array.from({{/uniqueItems}}requestParameters['{{paramName}}']{{#uniqueItems}}){{/uniqueItems}}!.join(runtime.COLLECTION_FORMATS["{{collectionFormat}}"]));
            {{/isCollectionFormatMulti}}
        }

        {{/isArray}}
        {{^isArray}}
        if (requestParameters['{{paramName}}'] != null) {
            {{#isDateTimeType}}
            formParams.append('{{baseName}}', (requestParameters['{{paramName}}'] as any).toISOString());
            {{/isDateTimeType}}
            {{^isDateTimeType}}
            {{#isPrimitiveType}}
            formParams.append('{{baseName}}', requestParameters['{{paramName}}'] as any);
            {{/isPrimitiveType}}
            {{^isPrimitiveType}}
            {{#isEnumRef}}
            formParams.append('{{baseName}}', requestParameters['{{paramName}}'] as any);
            {{/isEnumRef}}
            {{^isEnumRef}}
            {{^withoutRuntimeChecks}}
            formParams.append('{{baseName}}', new Blob([JSON.stringify({{{dataType}}}ToJSON(requestParameters['{{paramName}}']))], { type: "application/json", }));
            {{/withoutRuntimeChecks}}{{#withoutRuntimeChecks}}
            formParams.append('{{baseName}}', new Blob([JSON.stringify(requestParameters['{{paramName}}'])], { type: "application/json", }));
            {{/withoutRuntimeChecks}}
            {{/isEnumRef}}
            {{/isPrimitiveType}}
            {{/isDateTimeType}}
        }

        {{/isArray}}
        {{/formParams}}
        {{/hasFormParams}}
        cy.log('{{&summary}}');
        return this.request<{{{returnType}}}{{^returnType}}void{{/returnType}}>({
            path: `{{{path}}}`{{#pathParams}}.replace(`{${"{{baseName}}"}}`, encodeURIComponent(String(requestParameters['{{paramName}}']))){{/pathParams}},
            method: '{{httpMethod}}',
            headers: headerParameters,
            query: queryParameters,
            {{#hasBodyParam}}
            {{#bodyParam}}
            {{#isContainer}}
            {{^withoutRuntimeChecks}}
            body: requestParameters['{{paramName}}']{{#isArray}}{{#items}}{{^isPrimitiveType}}!.map({{datatype}}ToJSON){{/isPrimitiveType}}{{/items}}{{/isArray}},
            {{/withoutRuntimeChecks}}
            {{#withoutRuntimeChecks}}
            body: requestParameters['{{paramName}}'],
            {{/withoutRuntimeChecks}}
            {{/isContainer}}
            {{^isContainer}}
            {{^isPrimitiveType}}
            {{^withoutRuntimeChecks}}
            body: {{dataType}}ToJSON(requestParameters['{{paramName}}']),
            {{/withoutRuntimeChecks}}
            {{#withoutRuntimeChecks}}
            body: requestParameters['{{paramName}}'],
            {{/withoutRuntimeChecks}}
            {{/isPrimitiveType}}
            {{#isPrimitiveType}}
            body: requestParameters['{{paramName}}'] as any,
            {{/isPrimitiveType}}
            {{/isContainer}}
            {{/bodyParam}}
            {{/hasBodyParam}}
            {{#hasFormParams}}
            body: formParams,
            {{/hasFormParams}}
        }, initOverrides).then(response => {
            {{#returnType}}
            {{#isResponseFile}}
            return new runtime.BlobApiResponse(response);
            {{/isResponseFile}}
            {{^isResponseFile}}
            {{#returnTypeIsPrimitive}}
            {{#isMap}}
            return new runtime.JSONApiResponse<any>(response);
            {{/isMap}}
            {{#isArray}}
            return new runtime.JSONApiResponse<any>(response) as runtime.ApiResponse<{{{returnType}}}>;
            {{/isArray}}
            {{#returnSimpleType}}
            const contentTypeEntry = Object.entries(response.headers).find(
                ([key]) => key.toLowerCase() === 'content-type'
            );
            if (contentTypeEntry !== undefined) {
                const contentType = Array.isArray(contentTypeEntry[1])
                    ? contentTypeEntry[1][0]
                    : contentTypeEntry[1];
                if (this.isJsonMime(contentType)) {
                    return new runtime.JSONApiResponse<{{returnType}}>(response) as runtime.ApiResponse<{{{returnType}}}>;
                }
            }
            return new runtime.TextApiResponse(response);
            {{/returnSimpleType}}
            {{/returnTypeIsPrimitive}}
            {{^returnTypeIsPrimitive}}
            {{#isArray}}
            return new runtime.JSONApiResponse<{{{returnType}}}>(response{{^withoutRuntimeChecks}}, (jsonValue) => {{#uniqueItems}}new Set({{/uniqueItems}}jsonValue.map({{returnBaseType}}FromJSON){{/withoutRuntimeChecks}}){{#uniqueItems}}){{/uniqueItems}} as runtime.ApiResponse<{{{returnType}}}>;
            {{/isArray}}
            {{^isArray}}
            {{#isMap}}
            return new runtime.JSONApiResponse<any>(response{{^withoutRuntimeChecks}}, (jsonValue) => runtime.mapValues(jsonValue, {{returnBaseType}}FromJSON){{/withoutRuntimeChecks}}) as runtime.ApiResponse<any>;
            {{/isMap}}
            {{^isMap}}
            return new runtime.JSONApiResponse<{{{returnType}}}>(response{{^withoutRuntimeChecks}}, (jsonValue) => {{returnBaseType}}FromJSON(jsonValue){{/withoutRuntimeChecks}}) as runtime.ApiResponse<{{{returnType}}}>;
            {{/isMap}}
            {{/isArray}}
            {{/returnTypeIsPrimitive}}
            {{/isResponseFile}}
            {{/returnType}}
            {{^returnType}}
            return new runtime.VoidApiResponse(response);
            {{/returnType}}
        });
    }

    /**
     {{#notes}}
     * {{&notes}}
     {{/notes}}
     {{#summary}}
     * {{&summary}}
     {{/summary}}
     {{#isDeprecated}}
     * @deprecated
     {{/isDeprecated}}
     */
    {{^useSingleRequestParameter}}
    {{nickname}}({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{#isNullable}} | null{{/isNullable}}{{/isEnum}}, {{/allParams}}initOverrides?: RequestInit | runtime.InitOverrideFunction): Cypress.Chainable<{{{returnType}}}{{#returnType}}{{#isResponseOptional}} | null | undefined {{/isResponseOptional}}{{/returnType}}{{^returnType}}void{{/returnType}}> {
        return this.{{nickname}}Raw({{#allParams.0}}{ {{#allParams}}{{paramName}}: {{paramName}}{{^-last}}, {{/-last}}{{/allParams}} }, {{/allParams.0}}initOverrides).then((response) => {
            {{#returnType}}
            {{#isResponseOptional}}
            switch (response.raw.status) {
                {{#responses}}
                {{#is2xx}}
                case {{code}}:
                    return {{#dataType}} response.value(){{/dataType}}{{^dataType}}null{{/dataType}};
                {{/is2xx}}
                {{/responses}}
                default:
                    return response.value();
            }
            {{/isResponseOptional}}
            {{^isResponseOptional}}
            return response.value();
            {{/isResponseOptional}}
            {{/returnType}}
            {{^returnType}}
            return response.value();
            {{/returnType}}
        });
    }
    {{/useSingleRequestParameter}}
    {{#useSingleRequestParameter}}
    {{nickname}}({{#allParams.0}}requestParameters: {{#prefixParameterInterfaces}}{{classname}}{{/prefixParameterInterfaces}}{{operationIdCamelCase}}Request{{^hasRequiredParams}} = {}{{/hasRequiredParams}}, {{/allParams.0}}initOverrides?: RequestInit | runtime.InitOverrideFunction): Cypress.Chainable<{{{returnType}}}{{#returnType}}{{#isResponseOptional}} | null | undefined {{/isResponseOptional}}{{/returnType}}{{^returnType}}void{{/returnType}}> {
        return this.{{nickname}}Raw({{#allParams.0}}requestParameters, {{/allParams.0}}initOverrides).then((response) => {
            {{#returnType}}
            {{#isResponseOptional}}
            switch (response.raw.status) {
                {{#responses}}
                {{#is2xx}}
                case {{code}}:
                    return {{#dataType}} response.value(){{/dataType}}{{^dataType}}null{{/dataType}};
                {{/is2xx}}
                {{/responses}}
                default:
                    return response.value();
            }
            {{/isResponseOptional}}
            {{^isResponseOptional}}
            return response.value();
            {{/isResponseOptional}}
            {{/returnType}}
            {{^returnType}}
            return response.value();
            {{/returnType}}
        });
    }
    {{/useSingleRequestParameter}}

    {{/operation}}
}
{{/operations}}
{{#hasEnums}}

{{#operations}}
{{#operation}}
{{#allParams}}
{{#isEnum}}
{{#stringEnums}}
/**
  * @export
  * @enum {string}
  */
export enum {{operationIdCamelCase}}{{enumName}} {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}} = {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
}
{{/stringEnums}}
{{^stringEnums}}
/**
 * @export
 */
export const {{operationIdCamelCase}}{{enumName}} = {
{{#allowableValues}}
    {{#enumVars}}
    {{{name}}}: {{{value}}}{{^-last}},{{/-last}}
    {{/enumVars}}
{{/allowableValues}}
} as const;
export type {{operationIdCamelCase}}{{enumName}} = typeof {{operationIdCamelCase}}{{enumName}}[keyof typeof {{operationIdCamelCase}}{{enumName}}];
{{/stringEnums}}
{{/isEnum}}
{{/allParams}}
{{/operation}}
{{/operations}}
{{/hasEnums}}
